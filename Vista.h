#ifndef __VISTA_H__
#define __VISTA_H__

#define NUMERO_POLYGON 255
#define NUMERO_VERTICE (NUMERO_POLYGON<<1)
#define SWAP1(A,B) do{ (A)^=(B),(B)^=(A),(A)^=(B); } while (0);
#define SWAP2(A,B,C,D) do{ (A)^=(B),(B)^=(A),(A)^=(B),(C)^=(D),(D)^=(C),(C)^=(D); } while (0);

struct VERTEX{
	int X,Y,Z;
} VectorV[ NUMERO_VERTICE ];

struct POLYGON{
	unsigned int ID0;
	unsigned int ID1;
	unsigned int ID2;
	unsigned int COLOR;
} Polygono[ NUMERO_POLYGON ];

const unsigned int GRILL_W = 64;
const unsigned int GRILL_H = 64;
static unsigned int STEP_V = 0;
static unsigned int STEP_P = 0;
static unsigned int STEP_P_TEMP = 0;

const int TABLADIV[4096] = {65536,65536,32768,21845,16384,13107,10922,9362,8192,7281,6553,5957,5461,5041,4681,4369,4096,3855,3640,3449,3276,3120,2978,2849,2730,2621,2520,2427,2340,2259,2184,2114,1985,1985,1927,1872,1820,1771,1724,1680,1638,1598,1560,1524,1489,1456,1424,1394,1365,1337,1310,1285,1260,1236,1213,1191,1170,1149,1129,1110,1092,1074,1057,1040,1008,1008,992,978,963,949,936,923,910,897,885,873,862,851,840,829,819,809,799,789,780,771,762,753,744,736,728,720,712,704,697,689,675,675,668,661,655,648,642,636,630,624,618,612,606,601,595,590,585,579,574,569,564,560,555,550,546,541,537,532,528,524,520,516,508,508,504,500,496,492,489,485,481,478,474,471,468,464,461,458,455,451,448,445,442,439,436,434,431,428,425,422,420,417,414,412,407,407,404,402,399,397,394,392,390,387,385,383,381,378,376,374,372,370,368,366,364,362,360,358,356,354,352,350,348,346,344,343,339,339,337,336,334,332,330,329,327,326,324,322,321,319,318,316,315,313,312,310,309,307,306,304,303,302,300,299,297,296,295,293,291,291,289,288,287,286,284,283,282,281,280,278,277,276,275,274,273,271,270,269,268,267,266,265,264,263,262,261,260,259,258,257,255,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240,240,239,238,237,236,235,234,234,233,232,231,230,229,229,228,226,226,225,225,224,223,222,222,221,220,219,219,218,217,217,216,215,214,214,213,212,212,211,210,210,209,208,208,207,206,206,205,204,204,203,202,202,201,201,200,199,199,198,197,197,196,196,195,195,194,193,193,192,192,191,191,190,189,189,188,188,187,187,186,185,185,185,184,184,183,183,182,182,181,181,180,180,179,179,178,178,177,177,176,176,175,175,174,174,173,173,172,172,172,171,171,170,170,169,169,168,168,168,167,167,166,166,165,165,165,164,164,163,163,163,162,162,161,161,161,160,160,159,159,159,158,158,157,157,157,156,156,156,155,155,154,154,154,153,153,153,152,152,152,151,151,151,150,150,149,149,149,148,148,148,147,147,147,146,146,145,145,145,145,144,144,144,144,143,143,143,142,142,142,141,141,141,140,140,140,140,139,139,139,138,138,138,137,137,137,137,136,136,136,135,135,135,135,134,134,134,134,133,133,133,132,132,132,132,131,131,131,131,130,130,130,130,129,129,129,129,128,128,128,127,127,127,127,127,126,126,126,126,125,125,125,125,124,124,124,124,123,123,123,123,122,122,122,122,122,121,121,121,121,120,120,120,120,120,119,119,119,119,118,118,118,118,118,117,117,117,117,117,116,116,116,116,115,115,115,115,115,114,114,114,114,114,113,113,113,113,113,112,112,112,112,112,112,111,111,111,111,111,110,110,110,110,110,109,109,109,109,109,109,108,108,108,108,108,107,107,107,107,107,107,106,106,106,106,106,106,105,105,105,105,105,105,104,104,104,104,104,104,103,103,103,103,103,103,102,102,102,102,102,102,101,101,101,101,101,101,100,100,100,100,100,100,100,99,99,99,99,99,99,98,98,98,98,98,98,98,97,97,97,97,97,97,97,96,96,96,96,96,96,96,95,95,95,95,95,95,95,94,94,94,94,94,94,94,94,93,93,93,93,93,93,92,92,92,92,92,92,92,92,92,91,91,91,91,91,91,91,91,90,90,90,90,90,90,90,90,89,89,89,89,89,89,89,88,88,88,88,88,88,88,88,88,87,87,87,87,87,87,87,87,87,86,86,86,86,86,86,86,86,86,85,85,85,85,85,85,85,85,85,84,84,84,84,84,84,84,84,84,83,83,83,83,83,83,83,83,83,82,82,82,82,82,82,82,82,82,82,81,81,81,81,81,81,81,81,81,81,80,80,80,80,80,80,80,80,80,80,79,79,79,79,79,79,79,79,79,79,78,78,78,78,78,78,78,78,78,78,78,77,77,77,77,77,77,77,77,77,77,77,76,76,76,76,76,76,76,76,76,76,76,75,75,75,75,75,75,75,75,75,75,75,74,74,74,74,74,74,74,74,74,74,74,74,73,73,73,73,73,73,73,73,73,73,73,73,72,72,72,72,72,72,72,72,72,72,72,72,72,71,71,71,71,71,71,71,71,71,71,71,71,71,70,70,70,70,70,70,70,70,70,70,70,70,70,69,69,69,69,69,69,69,69,69,69,69,69,69,68,68,68,68,68,68,68,68,68,68,68,68,68,68,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,66,66,66,66,66,66,66,66,66,66,66,66,66,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16};
#define MAXSIN 255
const unsigned char sinTab[91] = {0,4,8,13,17,22,26,31,35,39,44,48,53,57,61,65,70,74,78,83,87,91,95,99,103,107,111,115,119,123,127,131,135,138,142,146,149,153,156,160,163,167,170,173,177,180,183,186,189,192,195,198,200,203,206,208,211,213,216,218,220,223,225,227,229,231,232,234,236,238,239,241,242,243,245,246,247,248,249,250,251,251,252,253,253,254,254,254,254,254,255};

int fastSin(int i)
{
	while(i<0) i+=360;
	while(i>=360) i-=360;
	if(i<90)  return((sinTab[i])); else
	if(i<180) return((sinTab[180-i])); else
	if(i<270) return(-(sinTab[i-180])); else
						return(-(sinTab[360-i]));
}

int fastCos(int i){
	return fastSin(i+90);
}

const int AddVertex( const int x, const int y, const int z ){
	if ( STEP_V >= NUMERO_VERTICE ){
		STEP_V=0;
	}

	for ( unsigned int Step=0; Step<STEP_V; ++Step )
	{
		if(
			( VectorV[ Step ].X == x ) && 
			( VectorV[ Step ].Y == y ) && 
			( VectorV[ Step ].Z == z )
		){
			printf("Repet vertex!!...\n");
			return Step;
		}
	}

	VectorV[STEP_V].X = x;
	VectorV[STEP_V].Y = y;
	VectorV[STEP_V].Z = z;
	const int STEP_V_TEMP = STEP_V;
	STEP_V++;
	return STEP_V_TEMP;
}

void AddPolygon(
	int x0, int y0, int z0,
	int x1, int y1, int z1,
	int x2, int y2, int z2,
	const unsigned int col
){
	if ( STEP_P >= NUMERO_POLYGON ){
		printf("MAXIMO POLYS!\n");
		STEP_P=0;
		return;
	}

    // if( y0 > y1 ) SWAP2(x0,x1,y0,y1);
    // if( y0 > y2 ) SWAP2(x0,x2,y0,y2);
    // if( y1 > y2 ) SWAP2(x1,x2,y1,y2);

	printf("Add Poly id: %i\n", STEP_P );

	int Identidad0 = AddVertex(x0,y0,z0);
	int Identidad1 = AddVertex(x1,y1,z1);
	int Identidad2 = AddVertex(x2,y2,z2);

	Polygono[ STEP_P ].ID0 = Identidad0;
	Polygono[ STEP_P ].ID1 = Identidad1;
	Polygono[ STEP_P ].ID2 = Identidad2;
	Polygono[ STEP_P ].COLOR = col;

	STEP_P_TEMP = STEP_P;

	STEP_P++;

}

void Cuadro( const int x, const int y, const int Z, const unsigned int color ){
	unsigned int X,Y; 
	for ( Y=0; Y<Z; ++Y )
	{
		for ( X=0; X<Z; ++X )
		{
			Pixel( (X+x), (Y+y), color );
		}
	}
}

// VIEW X-Y
void DrawGrilla_Z(void){
	/* VIEW X-Y */
	int X,Y;
	unsigned int i;
	for ( Y=0; Y<GRILL_H>>1; ++Y )
	{
		for ( X=0; X<GRILL_W>>1; ++X )
		{
			Cuadro(X<<3,Y<<3,2,0xff00ff00);
		}
	}
	for ( i = 0; i < STEP_V; ++i)
	{
		Cuadro(
			(VectorV[i].X+16) << 3,
			(VectorV[i].Y+16) << 3,
			3,
			0xff0000ff
		);
	}
}

void Line( int x0, int y0, int x1, int y1, const unsigned int color ){
	int Len = max( abs(x1-x0), abs(y1-y0) );
	Len+=(1>>Len);
	x1=((x1-x0)<<16) / Len;
	y1=((y1-y0)<<16) / Len;
	x0<<=16;
	y0<<=16;
	while(Len--){
		Pixel( x0>>16, y0>>16, color );
		x0+=x1;
		y0+=y1;
	}
}

#define PASOS 2

void Line2( int x0, int y0, int x1, int y1, const unsigned int color ){
	int Len = max( abs(x1-x0), abs(y1-y0) );
	Len+=(1>>Len);
	x1=((x1-x0)<<16) / Len;
	y1=((y1-y0)<<16) / Len;
	x0<<=16;
	y0<<=16;
	Len>>=PASOS;
	while(Len--){
		Pixel( x0>>16, y0>>16, color );
		x0+=x1<<PASOS;
		y0+=y1<<PASOS;
	}
}

void Triangle(
	int x0, int y0,
	int x1, int y1,
	int x2, int y2,
	const unsigned int color
	){
	if ( ( ( x1 - x0 ) * ( y2 - y1 ) ) - ( ( y1 - y0 ) * ( x2 - x1 ) ) < 0 ) return;
	Line( x0, y0, x1, y1, color );
	Line( x1, y1, x2, y2, color );
	Line( x2, y2, x0, y0, color );
}

void Pixel2( int x, int y, const unsigned int color ){
	// if ( (x%2) | (y%2) )return;
	if ( (x|y)&1 )return;
	Pixel( x, y, color );
}

void TriangleFill(
	int x0, int y0,
	int x1, int y1,
	int x2, int y2,
	const unsigned int color
){

	if ( ( ( x1 - x0 ) * ( y2 - y1 ) ) - ( ( y1 - y0 ) * ( x2 - x1 ) ) < 0 ) return;

    if( y0 > y1 ) SWAP2(x0,x1,y0,y1);
    if( y0 > y2 ) SWAP2(x0,x2,y0,y2);
    if( y1 > y2 ) SWAP2(x1,x2,y1,y2);

    int SlpX0;
    int SlpX1;
    int SlpX2;
    int X;
    int Y;
    int AX,BX;
    int StarX;
	int EndX;

	const int y1y0 = y1-y0;
    const int y2y0 = y2-y0;
    const int y2y1 = y2-y1;

    SlpX0 = (x1-x0) * TABLADIV[ y1y0 ];
    SlpX1 = (x2-x0) * TABLADIV[ y2y0 ];
    SlpX2 = (x2-x1) * TABLADIV[ y2y1 ];

    /*
	const int y1y0 = (y1-y0+(1>>(y1-y0)));
    const int y2y0 = (y2-y0+(1>>(y2-y0)));
    const int y2y1 = (y2-y1+(1>>(y2-y1)));
	SlpX0 = ((x1-x0)<<16) / y1y0;
    SlpX1 = ((x2-x0)<<16) / y2y0;
    SlpX2 = ((x2-x1)<<16) / y2y1;
    */

    AX = BX = (x0<<16);

    Y = y1 - y0;

    while ( Y-- ){

    	StarX = AX>>16;
    	EndX  = BX>>16;
    	if (StarX>EndX) StarX^=EndX, EndX^=StarX, StarX^=EndX; 
    	for ( X = StarX; X <= EndX; ++X){
    		Pixel2( X, y0, color );
    	}
    	// Pixel2( StarX, y0, 0xff00ff00 );
    	// Pixel2( EndX, y0, 0xff00ff00 );
    	AX+=SlpX0;
    	BX+=SlpX1;
    	y0++;
    }

    Y = y2 - y1;

    AX = x1<<16;

    while ( Y-- )
    {
    	StarX = AX>>16;
    	EndX  = BX>>16;
    	if (StarX>EndX) StarX^=EndX, EndX^=StarX, StarX^=EndX; 
    	for ( X = StarX; X <= EndX; ++X){
    		Pixel2( X, y1, color );
    	}
    	// Pixel2( StarX, y1, 0xff00ff00 );
    	// Pixel2( EndX, y1, 0xff00ff00 );
    	AX+=SlpX2;
    	BX+=SlpX1;
    	y1++;
    }

}


int SUM = 300;
int rot0=0,rot1=0;
int DX,DY,FOV,vx,vy,vz,vx_,vy_,vz_;

void DrawMalla(void){
	int cos0,sin0,cos1,sin1;
	int X0_,Y0_,X1_,Y1_,X2_,Y2_;
	cos0 = fastCos(rot0);
	sin0 = fastSin(rot0);
	cos1 = fastCos(rot1);
	sin1 = fastSin(rot1);
	struct VERTEX V_[ STEP_V ];
	unsigned int i;
	for ( i = 0; i < STEP_V; ++i){
		vx = VectorV[i].X;
		vy = VectorV[i].Y;
		vz = VectorV[i].Z;
		vx_ = (cos0*vx + sin0*vz)/MAXSIN;
		vy_ = (cos1*vy + (cos0*sin1*vz-sin0*sin1*vx)/MAXSIN)/MAXSIN;
		vz_ = SUM + ((cos0*cos1*vz-sin0*cos1*vx)/MAXSIN - sin1*vy)/MAXSIN;
		FOV = *(TABLADIV + (vz_));
		DX = ( ( vx_ * FOV + (1>>8) ) >> 7 ) + AnchoM;
		DY = ( ( vy_ * FOV + (1>>8) ) >> 7 ) +  AltoM;
		V_[ i ].X = DX;
		V_[ i ].Y = DY;
		V_[ i ].Z = vz;
		Cuadro( DX, DY, 4, 0xffff00ff );
	}
	for ( i = 0; i < STEP_P; ++i){
		X0_ = V_[ Polygono[ i ].ID0 ].X;
		Y0_ = V_[ Polygono[ i ].ID0 ].Y;
		X1_ = V_[ Polygono[ i ].ID1 ].X;
		Y1_ = V_[ Polygono[ i ].ID1 ].Y;
		X2_ = V_[ Polygono[ i ].ID2 ].X;
		Y2_ = V_[ Polygono[ i ].ID2 ].Y;
		TriangleFill(
			X0_,Y0_,
			X1_,Y1_,
			X2_,Y2_,
			Polygono[ i ].COLOR
		);
		Triangle(
			X0_,Y0_,
			X1_,Y1_,
			X2_,Y2_,
			Polygono[ i ].COLOR
			/*0xff00ff00*/
		);
	}
}


#endif